name: Continuous Integration

on:
  push:
    branches: [ main, develop, 'feat/*', 'fix/*' ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: '1.24.3'

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install Moon
      run: |
        curl -fsSL https://moonrepo.dev/install/moon.sh | bash
        echo "$HOME/.moon/bin" >> $GITHUB_PATH

    - name: Download Go dependencies
      run: go mod download
      working-directory: ./apps/dash

    - name: Format check
      run: |
        cd apps/dash
        gofmt_output=$(gofmt -l .)
        if [ -n "$gofmt_output" ]; then
          echo "The following files need formatting:"
          echo "$gofmt_output"
          exit 1
        fi

    - name: Run linting
      run: moon run dash:lint

    - name: Type check
      run: moon run dash:typecheck

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install Moon (Unix)
      if: runner.os != 'Windows'
      run: |
        curl -fsSL https://moonrepo.dev/install/moon.sh | bash
        echo "$HOME/.moon/bin" >> $GITHUB_PATH

    - name: Install Moon (Windows)
      if: runner.os == 'Windows'
      run: |
        irm https://moonrepo.dev/install/moon.ps1 | iex
        echo "$env:USERPROFILE\.moon\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Download Go dependencies
      run: go mod download
      working-directory: ./apps/dash

    - name: Run tests
      run: moon run dash:test-short
      continue-on-error: ${{ matrix.os == 'windows-latest' }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}
        path: |
          apps/dash/coverage.out
          apps/dash/test-report.json

  build:
    name: Build
    needs: [quality, test]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install Moon
      run: |
        curl -fsSL https://moonrepo.dev/install/moon.sh | bash
        echo "$HOME/.moon/bin" >> $GITHUB_PATH

    - name: Download Go dependencies
      run: go mod download
      working-directory: ./apps/dash

    - name: Build application
      run: moon run dash:ci-build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: hyper-dash-binary
        path: apps/dash/hyper-dash

  moon-validation:
    name: Moon Workspace Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Moon
      run: |
        curl -fsSL https://moonrepo.dev/install/moon.sh | bash
        echo "$HOME/.moon/bin" >> $GITHUB_PATH

    - name: Validate Moon workspace
      run: |
        moon --version
        moon check --all --dry-run

    - name: Check Moon cache
      run: |
        moon run dash:clean
        moon run dash:deps

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install Moon
      run: |
        curl -fsSL https://moonrepo.dev/install/moon.sh | bash
        echo "$HOME/.moon/bin" >> $GITHUB_PATH

    - name: Download Go dependencies
      run: go mod download
      working-directory: ./apps/dash

    - name: Run benchmarks
      run: moon run dash:benchmark

    - name: Generate CPU profile
      run: moon run dash:profile-cpu

    - name: Generate memory profile
      run: moon run dash:profile-mem

    - name: Upload performance artifacts
      uses: actions/upload-artifact@v4
      with:
        name: performance-profiles
        path: |
          apps/dash/*.prof

  notify:
    name: Notify Results
    needs: [quality, test, build, moon-validation]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Check results
      run: |
        echo "Quality: ${{ needs.quality.result }}"
        echo "Test: ${{ needs.test.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Moon: ${{ needs.moon-validation.result }}"
        
        if [[ "${{ needs.quality.result }}" == "success" && 
              "${{ needs.test.result }}" == "success" && 
              "${{ needs.build.result }}" == "success" && 
              "${{ needs.moon-validation.result }}" == "success" ]]; then
          echo "✅ All CI checks passed!"
        else
          echo "❌ Some CI checks failed"
          exit 1
        fi