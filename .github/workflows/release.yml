name: Release with GoReleaser

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: '1.24.3'

jobs:
  goreleaser:
    name: GoReleaser
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install Moon
      run: |
        curl -fsSL https://moonrepo.dev/install/moon.sh | bash
        echo "$HOME/.moon/bin" >> $GITHUB_PATH

    - name: Download Go dependencies
      run: go mod download
      working-directory: ./apps/dash

    - name: Run tests
      run: moon run dash:test

    - name: Run linting
      run: moon run dash:lint

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Import GPG key
      id: import_gpg
      uses: crazy-max/ghaction-import-gpg@v6
      if: env.GPG_PRIVATE_KEY != ''
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
      env:
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

    - name: Run GoReleaser
      uses: goreleaser/goreleaser-action@v5
      with:
        distribution: goreleaser
        version: latest
        args: release --clean
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      if: always()
      with:
        file: ./apps/dash/coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  notify:
    name: Notify Release
    needs: goreleaser
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Get release info
      id: release_info
      run: |
        RELEASE_TAG=${GITHUB_REF#refs/tags/}
        echo "RELEASE_TAG=$RELEASE_TAG" >> $GITHUB_OUTPUT
        echo "RELEASE_URL=https://github.com/${{ github.repository }}/releases/tag/$RELEASE_TAG" >> $GITHUB_OUTPUT

    - name: Notify success
      if: needs.goreleaser.result == 'success'
      run: |
        echo "‚úÖ Release ${{ steps.release_info.outputs.RELEASE_TAG }} completed successfully!"
        echo "üîó Release URL: ${{ steps.release_info.outputs.RELEASE_URL }}"

    - name: Notify failure
      if: needs.goreleaser.result == 'failure'
      run: |
        echo "‚ùå Release ${{ steps.release_info.outputs.RELEASE_TAG }} failed!"
        exit 1