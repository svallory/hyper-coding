export type Input = {
  leftCard: Card;
  rightCard: Card;
}

export type Card = Marko.AttrTag<{ 
  class?: Marko.HTMLAttributes['class'];
  content: Marko.Body;
}>;

let/currentCard='right'

.cardpair-container
  .cardpair-content data-show-card=currentCard
    .cardpair-buttons
      div.button.next data-cardpair-action="next" onClick() { currentCard = 'right' }
        fab side="right" theme="dark"
          icon name="terminal" circle
      div.button.previous data-cardpair-action="previous" onClick() { currentCard = 'left' }
        fab side="left" theme="light"
          icon name="book-heart" circle
    .card.left
      ${input.leftCard.content}
    .card.right
      ${input.rightCard.content}

style.scss --
  .cardpair-container {
    position: relative;
    height: 100vh;
    width: 100vw;
    overflow: hidden;
    padding: 1px 0;
  }

  .cardpair-buttons {
    position: absolute;
    // border: 1px solid red;
    width: 200px;
    height: 160px;
    z-index: 10000;
    left: calc(100vw - 109px);

    .button {
      position: relative;
      cursor: pointer;
      width: 100px;
      height: 66px;

      &.previous {
        left: calc(50% + 1px);
      }
    }
  }

  .cardpair-content {
    --mx: 8px;
    --my: 20px;

    display: flex;
    width: 200vw;
    height: calc(100vh - 40px);
    transition: transform 0.3s ease-in-out;
    margin: var(--my) 0 var(--my) var(--mx);
    
    border-radius: 32px 0 0 32px;
    box-shadow: rgba(0, 0, 0, 0.45) -25px -25px 20px -20px, rgba(0, 0, 0, 0.45) -25px 25px 20px -20px;

    .card, .card > *:first-child {
      width: 100%;
      height: 100%;
    }

    .card.left {
      width: calc(100vw - var(--mx));
    }

    &[data-show-card="left"] {
      transform: translateX(0);
    }

    &[data-show-card="right"] {
      transform: translateX(-100vw);
    }
  }