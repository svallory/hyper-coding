---
title: Hypergen Documentation
description: Modern code generator with LiquidJS engine, TypeScript actions, and intelligent cookbook discovery
---

# Hypergen

**What it is**: A modern code generator that orchestrates templates, actions, and codemods through recipes
**Who it's for**: Developers who want to automate repetitive coding tasks and share code generation patterns
**Key benefit**: Generate consistent, high-quality code faster than manual coding

Hypergen is a modern, scalable code generator built with TypeScript. It provides an intuitive recipe system with LiquidJS engine, TypeScript decorators for actions, and intelligent cookbook discovery from NPM and GitHub.

## Why Use Hypergen?

**Instead of copy-pasting boilerplate** ‚Üí Generate it consistently  
**Instead of manual setup tasks** ‚Üí Automate them with recipes  
**Instead of recreating patterns** ‚Üí Share them as cookbooks  
**Instead of forgetting best practices** ‚Üí Encode them in templates

## Key Features

### üöÄ Recipe Step System
- **Recipe.yml Configuration**: Rich variable types with validation and defaults
- **4-Tool Coordination**: Template/Action/CodeMod/Recipe tools executed in sequential steps
- **LiquidJS Engine**: Fast, secure templating with rich filters (camelCase, snakeCase, pluralize)
- **StepExecutor**: Orchestrates step execution with conditional logic and error handling
- **RecipeEngine**: Complete recipe lifecycle management with validation and caching

### ‚ö° TypeScript Actions
- **Decorator Pattern**: Modern `@action` decorators with metadata
- **Auto-discovery**: CLI automatically finds and registers actions
- **Parameter Validation**: Type checking before execution
- **Rich Help System**: Generated from action metadata

### üîç Cookbook Discovery
- **NPM Integration**: `@hyper-kits/*`, `hyper-kit-*`, `@user/hyper-kit-*` naming conventions
- **GitHub Discovery**: Cookbooks via `hyper-kit` topic
- **URL Resolution**: Direct loading from repos, gists, packages
- **Creator Trust**: Secure execution with per-creator consent

### üõ°Ô∏è Security & Trust
- **Safe Execution**: Secure recipe processing environment
- **Transparent Operations**: Clear logging of remote access
- **Validation Pipeline**: Comprehensive recipe validation

## Quick Start

```bash
# Install Hypergen
bun add hypergen

# Execute complete recipe with all steps
hypergen recipe execute my-component.yml --name=Button --typescript=true

# Validate and inspect recipes
hypergen recipe validate my-component.yml
hypergen recipe info my-component.yml
hypergen step list my-component.yml

# Execute individual steps
hypergen step execute my-component.yml "Generate component" --name=Button

# Discovery and actions
hypergen action list
hypergen discover react
```

## Learning Paths

**New to code generation?**
1. **[Understanding Concepts](/concepts/taxonomy)** (8 min) - Learn the mental model
2. **[Getting Started](/getting-started)** (15 min) - Install and generate your first files  
3. **[Finding Cookbooks](/tutorials/finding-cookbooks)** (10 min) - Discover community solutions

**Want to use existing cookbooks?**
1. **[Getting Started](/getting-started)** (15 min) - Installation and first generation
2. **[Finding Cookbooks](/tutorials/finding-cookbooks)** (10 min) - Discover and evaluate cookbooks
3. **[Running Recipes](/tutorials/running-recipes)** (15 min) - Master execution and variables

**Ready to create your own content?**
1. **[Understanding Concepts](/concepts/taxonomy)** (8 min) - Essential mental model
2. **[Creating Templates](/tutorials/creating-templates)** (20 min) - Build your first cookbook
3. **[Advanced Composition](/advanced-composition)** - Complex patterns and techniques

**Need reference information?**
- **[Complete Feature List](/features)** - All capabilities
- **[API Reference](/api/)** - TypeScript API documentation
- **[CLI Commands](/features#cli-commands-reference)** - Command reference

## Architecture

Hypergen is built on a modular architecture that enables:

- **Recipe Step System**: Complete framework with RecipeEngine and StepExecutor
- **4-Tool Coordination**: Template, Action, CodeMod, and Recipe tools working together
- **Sequential Execution**: Steps run in order with conditional logic and error handling
- **Template Engines**: Pluggable system with LiquidJS as default, EJS for compatibility
- **Action System**: TypeScript decorators with auto-discovery and validation
- **Cookbook Discovery**: Multi-source discovery (NPM, GitHub, local) with caching
- **Security Model**: Creator trust system with transparent consent
- **Performance**: <100ms startup, lazy loading, multi-level caching

## Community

- **GitHub**: [svallory/hypergen](https://github.com/svallory/hypergen)
- **Documentation**: This site
- **Issues**: Report bugs and request features on GitHub
- **Discussions**: Join the community discussions

Get started with the [Getting Started Guide](./getting-started) or explore the [Recipe Step System Guide](./advanced-composition) to see the complete tool coordination framework.